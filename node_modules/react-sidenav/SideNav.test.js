"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var enzyme_1 = require("enzyme");
var SideNav_1 = require("./SideNav");
var Nav_1 = require("react-sidenav/nav/Nav");
describe('<SideNav/>', function () {
    it('manages state internally if defaultSelectionPath is passed', function () {
        var wrapper = enzyme_1.mount((React.createElement(SideNav_1.SideNav, { defaultSelectedPath: '2' },
            React.createElement(Nav_1.Nav, { id: "1" }, "Nav"))));
        wrapper.find(Nav_1.Nav).simulate("click");
        expect(wrapper.state("selectedPath")).toBe("1");
    });
    it("calls onItemSelected listener when path is clicked", function () {
        var listener = jest.fn();
        var wrapper = enzyme_1.mount((React.createElement(SideNav_1.SideNav, { onItemSelection: listener, selectedPath: '1' },
            React.createElement(Nav_1.Nav, { id: "1" }, "Nav"))));
        wrapper.find(Nav_1.Nav).simulate("click");
        expect(listener.mock.calls.length).toBe(1);
        var arg = listener.mock.calls[0][0];
        expect(arg.path).toBe("1");
        expect(arg.id).toBe("1");
        expect(arg.payload).toBe(undefined);
    });
    it("calls onItemSelected with payload if Nav has payload", function () {
        var listener = jest.fn();
        var wrapper = enzyme_1.mount((React.createElement(SideNav_1.SideNav, { onItemSelection: listener, selectedPath: '1' },
            React.createElement(Nav_1.Nav, { id: "1", payload: "banana" }, "Nav"))));
        wrapper.find(Nav_1.Nav).simulate("click");
        expect(listener.mock.calls.length).toBe(1);
        var arg = listener.mock.calls[0][0];
        expect(arg.path).toBe("1");
        expect(arg.id).toBe("1");
        expect(arg.payload).toBe("banana");
    });
    it("will use defaultSelectedPath initially, then use internal state in subsequent call", function () {
        var listener = jest.fn();
        var wrapper = enzyme_1.mount((React.createElement(SideNav_1.SideNav, { onItemSelection: listener, defaultSelectedPath: '2' },
            React.createElement(Nav_1.Nav, { id: "1", payload: "banana" }, "Nav"))));
        expect(wrapper.state('selectedPath')).toBe('2');
        wrapper.find(Nav_1.Nav).simulate("click");
        expect(listener.mock.calls.length).toBe(1);
        var arg = listener.mock.calls[0][0];
        expect(arg.path).toBe("1");
        expect(arg.id).toBe("1");
        expect(arg.payload).toBe("banana");
        expect(wrapper.state('selectedPath')).toBe('1');
    });
    it('calls onClick on Nav ', function () {
        var sideNavListener = jest.fn();
        var navListener = jest.fn();
        var wrapper = enzyme_1.mount((React.createElement(SideNav_1.SideNav, { onItemSelection: sideNavListener, defaultSelectedPath: '2' },
            React.createElement(Nav_1.Nav, { id: "1", onClick: navListener, payload: "banana" }, "Nav"))));
        wrapper.find(Nav_1.Nav).simulate("click");
        var argMain = sideNavListener.mock.calls[0][0];
        var argNav = navListener.mock.calls[0][0];
        expect(argMain.path).toBe('1');
        expect(argNav.path).toBe('1');
        expect(argMain.payload).toBe("banana");
        expect(argNav.payload).toBe("banana");
    });
});
//# sourceMappingURL=SideNav.test.js.map